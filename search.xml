<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux命令行</title>
      <link href="/2023/03/23/linux%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
      <url>/2023/03/23/linux%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="linux命令行"><a href="#linux命令行" class="headerlink" title="linux命令行"></a>linux命令行</h2><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//查看rm命令的具体使用方法</span><br><span class="line">rm --help</span><br><span class="line">//删除文件夹</span><br><span class="line">rm -r </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web编程第一个实验项目</title>
      <link href="/2023/03/23/Web%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/03/23/Web%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%AE%9E%E9%AA%8C%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Web编程第一个实验项目"><a href="#Web编程第一个实验项目" class="headerlink" title="Web编程第一个实验项目"></a>Web编程第一个实验项目</h1><h2 id="题目要求："><a href="#题目要求：" class="headerlink" title="题目要求："></a>题目要求：</h2><p><img src="https://img-blog.csdnimg.cn/20210429232539324.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="项目完成步骤"><a href="#项目完成步骤" class="headerlink" title="项目完成步骤"></a>项目完成步骤</h2><p>使用Node.js和模板库Cheerio，request做一个爬虫代码，爬取<a href="https://news.sina.com.cn/china/">新浪新闻</a>，<a href="https://news.163.com/domestic/">网易新闻</a>，<a href="http://www.chinanews.com/">中国新闻网</a>中的各个部分。<br>下面以新浪新闻为例，分析页面：</p><h3 id="1-新闻页面分析"><a href="#1-新闻页面分析" class="headerlink" title="1. 新闻页面分析"></a>1. 新闻页面分析</h3><h4 id="1-1-对某一篇新闻页面元素进行分析："><a href="#1-1-对某一篇新闻页面元素进行分析：" class="headerlink" title="1.1 对某一篇新闻页面元素进行分析："></a>1.1 对<a href="https://news.sina.com.cn/c/2021-04-22/doc-ikmxzfmk8332048.shtml">某一篇新闻页面</a>元素进行分析：</h4><ul><li><p>标题  <code>main-title</code><br><img src="https://img-blog.csdnimg.cn/20210422213219520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>作者 <code>show_author</code><br><img src="https://img-blog.csdnimg.cn/2021042221442011.png" alt="在这里插入图片描述"></p></li><li><p>时间 <code>date</code><br><img src="https://img-blog.csdnimg.cn/20210422213505996.png" alt="在这里插入图片描述"></p></li><li><p>关键字：正则化匹配：<code>$(&#39;meta[name=\&quot;keywords\&quot;]&#39;).eq(0).attr(\&quot;content\&quot;)&quot;    </code><br><img src="https://img-blog.csdnimg.cn/20210423195744436.png" alt="在这里插入图片描述"></p></li><li><p>内容 <code>article</code><br><img src="https://img-blog.csdnimg.cn/2021042221394567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>来源 <code>source</code><br><img src="https://img-blog.csdnimg.cn/20210422213745926.png" alt="在这里插入图片描述"></p><h4 id="1-2-对新闻网页的URL进行分析"><a href="#1-2-对新闻网页的URL进行分析" class="headerlink" title="1.2 对新闻网页的URL进行分析"></a>1.2 对新闻网页的URL进行分析</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://news.sina.com.cn/c/2021-04-23/doc-ikmxzfmk8553784.shtml</span><br><span class="line">https://news.sina.com.cn/c/2021-04-23/doc-ikmyaawc1428218.shtml</span><br><span class="line">https://news.sina.com.cn/o/2021-04-22/doc-ikmxzfmk8371786.shtml</span><br></pre></td></tr></table></figure><p>从上述三个网址可知，每个网页都是由</p></li><li><p><code>https://news.sina.com.cn</code> 网页链接</p></li><li><p><code>/o/</code> 一个字母</p></li><li><p><code>2021-04-22</code> 年月日，由四个数字-两个数字-两个数字组成</p></li><li><p><code>doc-ikmxzfmk8371786.shtml</code> doc-15个字符.shtml<br>因此可以写出匹配网页的正则化为：<code>/\/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)\/doc-(\w&#123;15&#125;).shtml/</code></p></li></ul><h3 id="2-数据库设计和代码实现"><a href="#2-数据库设计和代码实现" class="headerlink" title="2. 数据库设计和代码实现"></a>2. 数据库设计和代码实现</h3><h5 id="2-1-设计数据库"><a href="#2-1-设计数据库" class="headerlink" title="2.1 设计数据库"></a>2.1 设计数据库</h5><ul><li>在mysql中创建数据库<code>crawlnews</code>，然后在该数据库里创建表<code>fetches</code>:<br><img src="https://img-blog.csdnimg.cn/20210423204205188.png" alt="在这里插入图片描述"></li><li>根据第1步分析的网页元素，设置fetches表的结构，url设置的属性为<code>UNIQUE</code>，因此插入数据之前需要判断是否已经爬取过相同的网页。<br><img src="https://img-blog.csdnimg.cn/20210423204115211.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h5 id="2-2-数据库连接和查询代码"><a href="#2-2-数据库连接和查询代码" class="headerlink" title="2.2 数据库连接和查询代码"></a>2.2 数据库连接和查询代码</h5></li><li>在js爬虫代码中使用mysql，需要先引用mysql文件。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;./mysql.js&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>其中在<code>mysql.js</code>连接数据库，并且完成了带参数和不带参数的sql语句查询。（<em>password需要写自己mysql的密码</em>）<br><img src="https://img-blog.csdnimg.cn/20210429221628207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="3-爬虫具体代码实现"><a href="#3-爬虫具体代码实现" class="headerlink" title="3. 爬虫具体代码实现"></a>3. 爬虫具体代码实现</h3>根据上述新闻分析，实现一个爬虫代码：</li></ul><h5 id="3-1-网页解析代码实现"><a href="#3-1-网页解析代码实现" class="headerlink" title="3.1 网页解析代码实现"></a>3.1 网页解析代码实现</h5><ul><li><p>首先定义我们想要爬取的网页名称和网页URL，和该网页的编码方式（编码方式可以在网页的header中找到）<br><img src="https://img-blog.csdnimg.cn/20210423194424719.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source_name = <span class="string">&quot;新浪新闻&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> myEncoding = <span class="string">&quot;utf-8&quot;</span>; <span class="comment">//转码成utf-8</span></span><br><span class="line"><span class="keyword">var</span> seedURL = <span class="string">&#x27;https://news.sina.com.cn/china/&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>在代码中定义我们需要爬取的网页的格式：带有<code>a</code>标签，标题从<code>class = main-title</code>中获取，向keywords这种从headers中读取的，就使用正则化进行匹配，每个选择的内容都在<strong>第1.1部分</strong>进行了说明。<br><img src="https://img-blog.csdnimg.cn/20210429210818537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>另外，还需要对新浪新闻中的网页进行分析，在<strong>第1.2部分</strong>中进行了解释<br><img src="https://img-blog.csdnimg.cn/20210429210852653.png" alt="在这里插入图片描述"></p></li></ul><p><strong>同理</strong>：网易新闻的页面解析代码为：<br><img src="https://img-blog.csdnimg.cn/20210429210405265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>      (已提供)中国新闻网的解析代码为：<br><img src="https://img-blog.csdnimg.cn/2021042921051358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="3-2-爬虫代码实现"><a href="#3-2-爬虫代码实现" class="headerlink" title="3.2 爬虫代码实现"></a>3.2 爬虫代码实现</h5><ul><li><p>需要的模块介绍<br>需要在代码开始导入fs，request，cheerio，iconv-lite和date-utils五个模块，其中fs为node.js内置的。下面为每个模块的含义和示例：</p><blockquote><p><strong>fs模块</strong>：Node.js 文件系统，提供一组类似 UNIX（POSIX）标准的文件操作API。Node.js 文件系统（fs 模块）模块中的方法均有异步和同步版本，例如读取文件内容的函数有异步的 fs.readFile() 和同步的 fs.readFileSync()。<br>   异步的方法函数最后一个参数为回调函数，回调函数的第一个参数包含了错误信息(error)。建议使用异步方法，比起同步，异步方法性能更高，速度更快，而且没有阻塞。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 异步读取</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;input.txt&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (err) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步读取: &quot;</span> + data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 同步读取</span></span><br><span class="line"><span class="keyword">var</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;input.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;同步读取: &quot;</span> + data.<span class="title function_">toString</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序执行完毕。&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p><strong>request</strong>：属于http模块，使用前需要引入http模块，主要作为客户端向HTTP服务器发起请求。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送Get请求</span></span><br><span class="line"><span class="comment">// 第一个参数:请求的完整URL,包括参数</span></span><br><span class="line"><span class="comment">// 第二个参数:请求结果回调函数,会传入3个参数,第一个错误,第二个响应对象,第三个请求数据</span></span><br><span class="line"><span class="title function_">request</span>(url,<span class="keyword">function</span> (<span class="params">error, response, data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><pre><code>**cheerio**：cheerio是jquery核心功能的一个快速灵活而又简洁的实现，主要是为了用在服务器端需要对DOM进行操作的地方。</code></pre></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把HTML告诉你的服务器.</span></span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(<span class="string">&#x27;&lt;h2 class=&quot;title&quot;&gt;Hello world&lt;/h2&gt;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&#x27;h2.title&#x27;</span>).<span class="title function_">text</span>(<span class="string">&#x27;Hello there!&#x27;</span>);</span><br><span class="line">$(<span class="string">&#x27;h2&#x27;</span>).<span class="title function_">addClass</span>(<span class="string">&#x27;welcome&#x27;</span>);</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">html</span>();</span><br><span class="line"><span class="comment">//=&gt; &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;h2 class=&quot;title welcome&quot;&gt;Hello there!&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><blockquote><pre><code>**iconv-lite**：使用纯 javascript 转化字符编码。</code></pre></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">&#x27;iconv-lite&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert from an encoded buffer to js string. </span></span><br><span class="line">str = iconv.<span class="title function_">decode</span>(<span class="keyword">new</span> <span class="title class_">Buffer</span>([<span class="number">0x68</span>, <span class="number">0x65</span>, <span class="number">0x6c</span>, <span class="number">0x6c</span>, <span class="number">0x6f</span>]), <span class="string">&#x27;win1251&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert from js string to an encoded buffer. </span></span><br><span class="line">buf = iconv.<span class="title function_">encode</span>(<span class="string">&quot;Sample input string&quot;</span>, <span class="string">&#x27;win1251&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if encoding is supported </span></span><br><span class="line">iconv.<span class="title function_">encodingExists</span>(<span class="string">&quot;us-ascii&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>date-utils</strong>：nodejs日期时间插件。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;date-utils&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dt.<span class="title function_">toFormat</span>(<span class="string">&quot;YYYY-MM-DD HH24:MI:SS&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>在代码中导入需要的模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> myRequest = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> myCheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> myIconv = <span class="built_in">require</span>(<span class="string">&#x27;iconv-lite&#x27;</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;date-utils&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置headers，防止网页屏蔽该爬虫，下面代码为设置的request函数。<br><img src="https://img-blog.csdnimg.cn/20210429220450965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>实现爬取新闻主页中的所有新闻网页。seedURL为我们需要爬取的新闻主页，因此对新闻主页爬取后对里面所有的链接进行判断，判断是否是一个合理的新闻网页。使用之前找到的新闻网址的规律，进行正则化项匹配，匹配成功后需要调用mysql中的查询函数。</p></li><li><p>因为需要判断是否爬取过相同的网页，因此实现查询（select）的sql语句:<code>fetch_url_Sql</code>和需要传入的参数（这次处理的网页URL）:<code>fetch_url_Sql_Params</code>，调用mysql的query函数对数据库进行查询，通过有无查询结果来判断之前是否已经爬取。</p></li><li><p>如果不存在，再对其网页进行爬取，即调用<code>newsGet(myURL)    </code>函数。<br><img src="https://img-blog.csdnimg.cn/20210429220624490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>爬取新闻网页。用<code>cheerio</code>解析网页，定义一个新的变量fetch，存储我们需要的标题，作者，内容等等之类的。使用前面定义的<code>title_format</code>，<code>date_format</code>等之类的标准化格式，获取爬取网页中的各个元素。</p></li><li><p> 函数最后需要将得到的网页元素插入（insert）到<code>fetches</code>表中。实现insert语句的sql代码<code>fetchAddSql</code>和需要插入的网页元素值<code>fetchAddSql_Params</code>，调用mysql中的query函数，对表进行插入操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">newsGet</span>(<span class="params">myURL</span>) &#123; <span class="comment">//读取新闻页面</span></span><br><span class="line">    <span class="title function_">request</span>(myURL, <span class="keyword">function</span>(<span class="params">err, res, body</span>) &#123; <span class="comment">//读取新闻页面</span></span><br><span class="line">        <span class="comment">//try &#123;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(myURL)</span><br><span class="line">        <span class="keyword">if</span> (body == <span class="literal">undefined</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> html_news = myIconv.<span class="title function_">decode</span>(body, myEncoding); <span class="comment">//用iconv转换编码</span></span><br><span class="line">        <span class="comment">// console.log(html_news);</span></span><br><span class="line">        <span class="comment">//准备用cheerio解析html_news</span></span><br><span class="line">        <span class="keyword">var</span> $ = myCheerio.<span class="title function_">load</span>(html_news, &#123; <span class="attr">decodeEntities</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">        myhtml = html_news;</span><br><span class="line">        <span class="comment">//&#125; catch (e) &#123;    console.log(&#x27;读新闻页面并转码出错：&#x27; + e);&#125;;</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;转码读取成功:&quot;</span> + myURL);</span><br><span class="line">        <span class="comment">//动态执行format字符串，构建json对象准备写入文件或数据库</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> fetch = &#123;&#125;; <span class="comment">//构造一个新的fetch用于存储数据</span></span><br><span class="line">        fetch.<span class="property">title</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        fetch.<span class="property">content</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        fetch.<span class="property">publish_date</span> = (<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">toFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>);</span><br><span class="line">        <span class="comment">//fetch.html = myhtml;</span></span><br><span class="line">        fetch.<span class="property">url</span> = myURL;</span><br><span class="line">        fetch.<span class="property">source_name</span> = source_name;</span><br><span class="line">        fetch.<span class="property">source_encoding</span> = myEncoding; <span class="comment">//编码</span></span><br><span class="line">        fetch.<span class="property">crawltime</span> = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (keywords_format == <span class="string">&quot;&quot;</span>) fetch.<span class="property">keywords</span> = source_name; <span class="comment">// eval(keywords_format);  //没有关键词就用sourcename</span></span><br><span class="line">        <span class="keyword">else</span> fetch.<span class="property">keywords</span> = <span class="built_in">eval</span>(keywords_format);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (title_format == <span class="string">&quot;&quot;</span>) fetch.<span class="property">title</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">else</span> fetch.<span class="property">title</span> = <span class="built_in">eval</span>(title_format); <span class="comment">//标题</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (date_format != <span class="string">&quot;&quot;</span>) fetch.<span class="property">publish_date</span> = <span class="built_in">eval</span>(date_format); <span class="comment">//刊登日期   </span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;date: &#x27;</span> + fetch.<span class="property">publish_date</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(myURL);</span><br><span class="line">        fetch.<span class="property">publish_date</span> = regExp.<span class="title function_">exec</span>(fetch.<span class="property">publish_date</span>)[<span class="number">0</span>];</span><br><span class="line">        fetch.<span class="property">publish_date</span> = fetch.<span class="property">publish_date</span>.<span class="title function_">replace</span>(<span class="string">&#x27;年&#x27;</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        fetch.<span class="property">publish_date</span> = fetch.<span class="property">publish_date</span>.<span class="title function_">replace</span>(<span class="string">&#x27;月&#x27;</span>, <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        fetch.<span class="property">publish_date</span> = fetch.<span class="property">publish_date</span>.<span class="title function_">replace</span>(<span class="string">&#x27;日&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        fetch.<span class="property">publish_date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>(fetch.<span class="property">publish_date</span>).<span class="title function_">toFormat</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (author_format == <span class="string">&quot;&quot;</span>) fetch.<span class="property">author</span> = source_name; <span class="comment">//eval(author_format);  //作者</span></span><br><span class="line">        <span class="keyword">else</span> fetch.<span class="property">author</span> = <span class="built_in">eval</span>(author_format);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (content_format == <span class="string">&quot;&quot;</span>) fetch.<span class="property">content</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">else</span> fetch.<span class="property">content</span> = <span class="built_in">eval</span>(content_format).<span class="title function_">replace</span>(<span class="string">&quot;\r\n&quot;</span> + fetch.<span class="property">author</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//内容,是否要去掉作者信息自行决定</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (source_format == <span class="string">&quot;&quot;</span>) fetch.<span class="property">source</span> = fetch.<span class="property">source_name</span>;</span><br><span class="line">        <span class="keyword">else</span> fetch.<span class="property">source</span> = <span class="built_in">eval</span>(source_format).<span class="title function_">replace</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//来源</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (desc_format == <span class="string">&quot;&quot;</span>) fetch.<span class="property">desc</span> = fetch.<span class="property">title</span>;</span><br><span class="line">        <span class="keyword">else</span> fetch.<span class="property">desc</span> = <span class="built_in">eval</span>(desc_format).<span class="title function_">replace</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//摘要    </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// var filename = source_name + &quot;_&quot; + (new Date()).toFormat(&quot;YYYY-MM-DD&quot;) +</span></span><br><span class="line">        <span class="comment">//     &quot;_&quot; + myURL.substr(myURL.lastIndexOf(&#x27;/&#x27;) + 1) + &quot;.json&quot;;</span></span><br><span class="line">        <span class="comment">// ////存储json</span></span><br><span class="line">        <span class="comment">// fs.writeFileSync(filename, JSON.stringify(fetch));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//sql插入语句</span></span><br><span class="line">        <span class="keyword">var</span> fetchAddSql = <span class="string">&#x27;INSERT INTO fetches(url,source_name,source_encoding,title,&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;keywords,author,publish_date,crawltime,content) VALUES(?,?,?,?,?,?,?,?,?)&#x27;</span>;</span><br><span class="line">        <span class="keyword">var</span> fetchAddSql_Params = [fetch.<span class="property">url</span>, fetch.<span class="property">source_name</span>, fetch.<span class="property">source_encoding</span>,</span><br><span class="line">            fetch.<span class="property">title</span>, fetch.<span class="property">keywords</span>, fetch.<span class="property">author</span>, fetch.<span class="property">publish_date</span>,</span><br><span class="line">            fetch.<span class="property">crawltime</span>.<span class="title function_">toFormat</span>(<span class="string">&quot;YYYY-MM-DD HH24:MI:SS&quot;</span>), fetch.<span class="property">content</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行sql，数据库中fetch表里的url属性是unique，不会在数据库中写入重复的url</span></span><br><span class="line">        mysql.<span class="title function_">query</span>(fetchAddSql, fetchAddSql_Params, <span class="keyword">function</span>(<span class="params">qerr, vals, fields</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (qerr) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(qerr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;); <span class="comment">//写入mysql</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li><p>任意一篇新闻爬取结果如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;河海大学图书借阅排行榜第一的书居然是？|【世界读书日】&quot;</span>,</span><br><span class="line">    <span class="string">&quot;content&quot;</span>: <span class="string">&quot;\n\t\t\t\t　　原标题：河海大学图书借阅排行榜第一的书居然是？|【世界读书日】　　来源:河海大学　　世　　界　　读　　书　　日&quot;</span>,</span><br><span class="line">    <span class="string">&quot;publish_date&quot;</span>: <span class="string">&quot;2021-04-23&quot;</span>,</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;https://news.sina.com.cn/c/2021-04-23/doc-ikmyaawc1423692.shtml&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source_name&quot;</span>: <span class="string">&quot;新浪新闻&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source_encoding&quot;</span>: <span class="string">&quot;utf-8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;crawltime&quot;</span>: <span class="string">&quot;2021-04-23T11:56:04.698Z&quot;</span>,</span><br><span class="line">    <span class="string">&quot;keywords&quot;</span>: <span class="string">&quot;河海大学图书借阅排行榜第一的书居然是？|【世界读书日】&quot;</span>,</span><br><span class="line">    <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="string">&quot;河海大学&quot;</span>,</span><br><span class="line">    <span class="string">&quot;desc&quot;</span>: <span class="string">&quot;原标题：河海大学图书借阅排行榜第一的书居然是？|【世界读书日】来源:河海大学&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>存储到数据库crawlnews中结果如下：<br><img src="https://img-blog.csdnimg.cn/20210423212301496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="4-使用Express框架搭建web服务器实现新闻查询和时间热度分析"><a href="#4-使用Express框架搭建web服务器实现新闻查询和时间热度分析" class="headerlink" title="4. 使用Express框架搭建web服务器实现新闻查询和时间热度分析"></a>4. 使用Express框架搭建web服务器实现新闻查询和时间热度分析</h3><h4 id="4-1-安装express"><a href="#4-1-安装express" class="headerlink" title="4.1 安装express"></a>4.1 安装express</h4><blockquote><p>Express是一个简单且灵活的node.js Web应用框架，可以快速搭建一个完整功能的网站。</p><ul><li>可以设置中间件响应HTTP请求</li><li>定义路由表执行不同的HTTP请求</li><li>通过向模板传递参数来动态渲染HTML页面</li></ul><p>使用Express脚手架初始化一个规范化项目。</p></blockquote></li></ul><p>虽然当项目的路由过多时会使app.js文件很臃肿，但是当前项目没有很多路由，因此使用express脚手架是合理的。</p><ol><li>使用express脚手架创建一个网站框架<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">express -e search_site</span><br></pre></td></tr></table></figure></li><li>在该网页中需要查询mysql中fetches中的数据，因此需要安装<code>mysql</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql -save</span><br></pre></td></tr></table></figure></li><li>安装其他需要的模块<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></li><li>在cmd中输入<code>node bin/www</code>查看网页<code>127.0.0.1:3000</code>已搭建成功。<br><img src="https://img-blog.csdnimg.cn/20210423215007916.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h4 id="4-2-新闻查询"><a href="#4-2-新闻查询" class="headerlink" title="4.2 新闻查询"></a>4.2 新闻查询</h4></li></ol><ul><li>在search.html网页中实现可以针对标题，内容，关键词进行检索。相应的SQL查询语句为：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> crawlnews </span><br><span class="line"><span class="keyword">WHERE</span> title <span class="keyword">like</span> con1　<span class="keyword">AND</span> keywords <span class="keyword">like</span> con2 <span class="keyword">AND</span> content <span class="keyword">like</span> con3;</span><br></pre></td></tr></table></figure></li><li>在search.html中有一个可以输入标题，内容和关键字的表单，用户可以输入想要查询的内容。<br><img src="https://img-blog.csdnimg.cn/20210429224123459.png" alt="在这里插入图片描述"></li><li>当后端收到html页面发送的GET请求时，对请求进行解析，使用<code>request.query</code>分别得到标题，内容和关键字的查询内容，然后构造SQL语句，对数据库进行查询。将查询结果作为response返回给网页。</li><li>其中的<code>publish_date.toLocaleDateString()</code>语句是将标准时间的publish_date转变为年月日的格式，更加符合观看者的习惯。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2020-01-13T16:00:00.000Z  -&gt;   2020/1/14</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/20210429223935892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>然后在前端中对response进行解析，在<code>id=record2</code>的地方构造一个table，显示查询后符合的新闻。<br><img src="https://img-blog.csdnimg.cn/20210429224015602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>（虽然有实现分页代码，但因为不能正常显示新闻在网页上，等待之后完善）<h4 id="4-3-时间热度分析"><a href="#4-3-时间热度分析" class="headerlink" title="4.3 时间热度分析"></a>4.3 时间热度分析</h4></li><li>在wordhot.html中实现对于一个查询词显示每一天在新闻中出现的次数。相应的SQL查询语句为：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> publish_date,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num </span><br><span class="line"><span class="keyword">FROM</span> fetches <span class="keyword">WHERE</span> title <span class="keyword">like</span> con1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> publish_date <span class="keyword">ORDER</span> <span class="keyword">BY</span> publish_date <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure> 需要对publish_date进行分组，计算每个组中新闻的条数。<br> 还可以使用ORDER BY publish_date desc对新闻日期进行降序排序。</li><li>首先在wordhot.html中构建一个输入标题的表单。使得用户可以输入想要查询的标题内容。<img src="https://img-blog.csdnimg.cn/20210429225333620.png" alt="在这里插入图片描述"></li><li>然后在后端中获取该request，使用<code>request.query.title</code>解析出标题，针对这个标题，利用前面写的SQL语法进行查询，并且将查询值返回。<br><img src="https://img-blog.csdnimg.cn/20210429225404217.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>最初，我使用表格显示查询到的数据。在表格中显示日期和总计新闻数。该表格构造的js代码和前一个search.html中的代码类似。<br><img src="https://img-blog.csdnimg.cn/202104292254476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>显示结果如下：<br><img src="https://img-blog.csdnimg.cn/20210428181736345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>因为表格的显示不够直观，因此改为折线图展示。导入Echart的js文件，定义一个chart并且使用<code>echarts.init()</code>初始化一个echart图形。在option中填入需要的title，x值，y值，并且设定图形类型为<code>line</code>。<br><img src="https://img-blog.csdnimg.cn/20210429225502322.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h3 id="5-网页展示"><a href="#5-网页展示" class="headerlink" title="5. 网页展示"></a>5. 网页展示</h3>完成第4步后，又对网页进行了：</li></ul><ol><li> 主页设计：实现了两个功能页面的跳转。</li><li>CSS设计：使得页面更加美观</li><li>导航栏设计：使得页面的跳转更加方便。<br><img src="https://img-blog.csdnimg.cn/20210429232329941.png" alt="在这里插入图片描述"><br>因此最终网页展示如下：</li></ol><ul><li><p><strong>主页</strong>(localhost:3000):</p><pre><code>             可以跳转至：              -   关键词查询网页（search.html)              -   时间热度分析网页（wordhot.html)</code></pre><p><img src="https://img-blog.csdnimg.cn/20210429234017374.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p><strong>关键词查询</strong>网页（search.html):<br>当输入想要查询的词后，可以以列表的形式显示查询结果：</p><ul><li>仅查询<code>title</code>：<br><img src="https://img-blog.csdnimg.cn/20210429231324527.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>查询<code>title</code>和<code>keywords</code>:<br><img src="https://img-blog.csdnimg.cn/20210429231438814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>查询<code>title</code>，<code>content</code>和<code>keywords</code>:<br><img src="https://img-blog.csdnimg.cn/20210429231635665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li><li><p>  <strong>时间热度分析</strong>网页（wordhot.html)</p></li></ul><p>输入想要查询的标题，会显示数据库中的新闻中包含该词的数量，并且按照日期绘制折线图。使得时间热度分析更加直观。<br><img src="https://img-blog.csdnimg.cn/20210429231823278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210429232100562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>在本次项目中，理解js代码是如何运行的，该怎么设计一个网站的框架，如何使用代码对网页和服务器进行通信，是比较重要也是我比较薄弱的方面。</li><li>实践了使用js进行爬虫和构建网页，学习到了前后端如何通过request和response进行交互，怎么在网页中插入图表，对网页设置CSS，完成了作业的要求。</li><li>但因为对js和html代码仍然不太熟悉，因此没有完成分页功能，希望在之后对代码进行改进和优化。</li><li>通过本次项目发现，只有真实的完成过任务，才能真正掌握一门语言。希望之后也能主动使用js。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web编程项目</title>
      <link href="/2023/03/23/web%E7%BC%96%E7%A8%8B%E9%A1%B9%E7%9B%AE/"/>
      <url>/2023/03/23/web%E7%BC%96%E7%A8%8B%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="web编程项目"><a href="#web编程项目" class="headerlink" title="web编程项目"></a>web编程项目</h1><h2 id="一-项目要求"><a href="#一-项目要求" class="headerlink" title="一 项目要求"></a>一 项目要求</h2><p><img src="https://img-blog.csdnimg.cn/20210625124944514.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="二-项目实现"><a href="#二-项目实现" class="headerlink" title="二 项目实现"></a>二 项目实现</h2><p>该项目使用了以下模块：</p><blockquote><p><strong>express-session</strong>：是express中的一个处理session的中间件。有以下特点：session管理(基本功能),cookie签名,可替换持久储存模块。</p></blockquote><p>在<code>app.js</code>中，设置session的各个参数。<br><img src="https://img-blog.csdnimg.cn/20210625200130105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p><strong>morgan</strong>：express默认的日志中间件。</p></blockquote><blockquote><p><strong>angularJS</strong>：是一个 JavaScript 框架。它可通过&lt;script&gt; 标签添加到 HTML 页面。AngularJS通过指令扩展了HTML，并且通过表达式绑定数据到 HTML。</p></blockquote><p><code>ng-app</code>指令指明了应用, <code>ng-controller</code> 指明了控制器。<br><img src="https://img-blog.csdnimg.cn/20210625200905389.png" alt="在这里插入图片描述"></p><p>根据项目要求，分别介绍基本要求中的五个功能。</p><h3 id="1-用户注册-非注册"><a href="#1-用户注册-非注册" class="headerlink" title="1. 用户注册/非注册"></a>1. 用户注册/非注册</h3><p>要实现用户注册的功能，首先需要创建一个保存用户信息的<code>user</code>表，然后实现当用户注册时存入<code>user</code>，没有注册的用户不能访问网页。</p><h4 id="1-1-构建user表"><a href="#1-1-构建user表" class="headerlink" title="1.1 构建user表"></a>1.1 构建user表</h4><p>其中的cond列存储该账号的状态，stop：账号禁用，start：账号启用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建用户信息数据表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `crawl`.`<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `registertime` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `cond` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `username_UNIQUE` (`username`))</span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h4 id="1-2-实现login，register，logout代码"><a href="#1-2-实现login，register，logout代码" class="headerlink" title="1.2 实现login，register，logout代码"></a>1.2 实现login，register，logout代码</h4><ul><li><p><strong>login</strong>：登录时调用该函数，访问<code>/users/login</code>路径，判断该用户是否存在，用户和密码是否匹配，该用户是否没被禁用；如果都满足，则返回<code>ok</code>，将用户信息存入session和cookie中，跳转到<code>news.html</code>页面。</p><img src="https://img-blog.csdnimg.cn/20210625121931513.png" width="70%"><img src="https://img-blog.csdnimg.cn/20210625122331596.png"   width="70%"></li><li><p><strong>register</strong>：注册时调用该函数，访问<code>/users/register</code>路径，判断该用户是否已经存在，不存在就添加到user表中并返回<code>ok</code>，跳转到<code>index.html</code>界面。</p><img src="https://img-blog.csdnimg.cn/20210625123458160.png"   width="70%"><img src="https://img-blog.csdnimg.cn/20210625122958706.png"   width="70%"></li><li><p><strong>logout</strong>：登出时调用该函数，访问<code>/users/logout</code>路径，删除掉session和cookie中存储的用户信息，并跳转到<code>index.html</code>界面。</p><img src="https://img-blog.csdnimg.cn/20210625124037282.png"   width="70%"><img src="https://img-blog.csdnimg.cn/20210625124130623.png"   width="70%"></li></ul><h4 id="1-3-实现非注册用户无法访问"><a href="#1-3-实现非注册用户无法访问" class="headerlink" title="1.3 实现非注册用户无法访问"></a>1.3 实现非注册用户无法访问</h4><p>在进入news.html页面后，每一个操作都需要首先判断<code>request.session[&#39;username&#39;]</code>是否等于<code>undefined</code>，即判断当前是否有用户登录，只有登录之后才能进行相应的操作，否则只能跳转到登录界面<code>index.html</code>.<br><img src="https://img-blog.csdnimg.cn/20210625124615654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-用户操作记入日志"><a href="#2-用户操作记入日志" class="headerlink" title="2. 用户操作记入日志"></a>2. 用户操作记入日志</h3><h4 id="2-1-构建user-action表"><a href="#2-1-构建user-action表" class="headerlink" title="2.1 构建user_action表"></a>2.1 构建user_action表</h4><p>存入用户的用户名，请求时间，方式，网址和状态码。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--记录用户的登陆，查询（具体查询语句）操作</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `crawl`.`user_action` (</span><br><span class="line">  `id` <span class="type">INT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `request_time` <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `request_method` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `request_url` <span class="type">VARCHAR</span>(<span class="number">300</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `status` <span class="type">int</span>(<span class="number">4</span>),</span><br><span class="line">  `remote_addr` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`))</span><br><span class="line">ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h4 id="2-2-实现请求存入表"><a href="#2-2-实现请求存入表" class="headerlink" title="2.2 实现请求存入表"></a>2.2 实现请求存入表</h4><p>引入<code>morgan</code>，借助中间件保存的信息。将每一次请求的信息通过函数解析得到相关的数据，调用<code>logDAO</code>中的<code>userlog</code>插入<code>user_action</code>表中。<br><img src="https://img-blog.csdnimg.cn/20210625125212454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>并在terminal中输出相关的信息。<br><img src="https://img-blog.csdnimg.cn/2021062512590157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0x1Y2t5XzdfNw==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="四-项目总结"><a href="#四-项目总结" class="headerlink" title="四 项目总结"></a>四 项目总结</h2><p>通过完成web编程期末项目，更加熟悉javascript的实现逻辑，了解了AngularJS这个JavaScript 框架。但在该项目中还没有实现修改数据库的值后及时显示在页面上，希望之后能加以改进。而对于如何实现一个从前端-后端-数据库的项目有了一定的经验。当想要实现某个功能时：</p><ol><li>首先需要考虑这个功能需要从网页中获取数据吗？如果需要，则应该在html中设计相应的组件，点击按钮会发生怎样的变化。</li><li>如果这个变化需要后端的参与，则应该设计相应的函数处理该请求。</li><li>而且后端也分为了处理代码和路由代码：<ul><li>路由函数处理request请求，可以获取传过来的参数，使用这些参数可以访问数据库，并将结果写入response。</li><li>处理函数可以响应前端的调用，构造url调用路由函数，得到返回结果可以进行相应的处理，比如：返回新页面，显示某页面，返回echarts图表，将返回数据写入到前端页面中。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/03/22/hello-world/"/>
      <url>/2023/03/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
